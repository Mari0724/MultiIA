from fastapi import APIRouter, HTTPException, Query
from app.prediction.application.prediction_service import (
    train_linear_model, predict_linear,
    train_logistic_model, predict_logistic
)

router = APIRouter(prefix="/prediction", tags=["Predicci√≥n"])  # üëà agrupamos rutas bajo /prediction


# ------------------------------
# üå± Endpoint ra√≠z
# ------------------------------
@router.get("/", summary="Estado del API", response_description="Mensaje de bienvenida")
def root():
    """
    Devuelve un mensaje indicando que la API de predicciones est√° activa.
    """
    return {"message": "Prediction API lista üöÄ"}


# ------------------------------
# üìà Regresi√≥n Lineal
# ------------------------------
@router.get(
    "/linear/train",
    summary="Entrenar modelo lineal",
    response_description="M√©tricas del entrenamiento (MSE, p√©rdida)"
)
def train_linear():
    """
    Entrena un modelo de **regresi√≥n lineal** para predecir el **peso del gato (kg)** a partir de su tama√±o.

    - **Datos simulados**: gatos de 20‚Äì60 cm
    - **Salida**: p√©rdida final y m√©tricas MSE
    """
    return train_linear_model()


@router.get(
    "/linear/predict",
    summary="Predecir peso con modelo lineal",
    response_description="Peso estimado (kg) del gato"
)
def predict_linear_endpoint(
    x: float = Query(..., description="Tama√±o del gato en cm (15‚Äì125)", example=42.0)
):
    """
    Predice el **peso estimado** de un gato (en kg) a partir de su **tama√±o en cm**.

    - **Input**: tama√±o del gato en cm
    - **Rango v√°lido**: 15‚Äì125
    - **Output**: JSON con m√©tricas y peso estimado
    """
    try:
        return predict_linear(x)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Modelo no entrenado")


# ------------------------------
# üê≠ Regresi√≥n Log√≠stica
# ------------------------------
@router.get(
    "/logistic/train",
    summary="Entrenar modelo log√≠stico",
    response_description="M√©tricas del entrenamiento (accuracy, F1, etc.)"
)
def train_logistic():
    """
    Entrena un modelo de **regresi√≥n log√≠stica** que predice si un gato atrapa un rat√≥n.

    - **Features**:
        - velocidad (0‚Äì20 m/s)
        - energ√≠a (0‚Äì1)
    - **Output**: m√©tricas como accuracy, precision, recall, f1_score
    """
    return train_logistic_model()


@router.get(
    "/logistic/predict",
    summary="Predecir captura de rat√≥n",
    response_description="Probabilidad y clase de predicci√≥n"
)
def predict_logistic_endpoint(
    x1: float = Query(..., description="Velocidad del gato en m/s (0‚Äì20)", example=12.5),
    x2: float = Query(..., description="Nivel de energ√≠a del gato (0‚Äì1)", example=0.7)
):
    """
    Predice si un gato **atrapa un rat√≥n** o no.

    - **Input**:
        - velocidad (m/s) entre 0 y 20
        - energ√≠a entre 0 y 1
    - **Output**:
        - probabilidad entre [0,1]
        - clase: 0 = no atrapa, 1 = atrapa
    """
    try:
        return predict_logistic(x1, x2)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Modelo no entrenado")
