from fastapi import APIRouter, HTTPException, Query
from app.prediction.application.prediction_service import (
    train_linear_model, predict_linear,
    train_logistic_model, predict_logistic
)

# Definici√≥n del router de FastAPI

# Se define un router para agrupar las rutas relacionadas con predicciones.
# Todas las rutas estar√°n bajo el prefijo "/prediction".
# Adem√°s, se agrupan en la etiqueta "Predicci√≥n" para la documentaci√≥n autom√°tica de Swagger.

router = APIRouter(prefix="/prediction", tags=["Predicci√≥n"])  # üëà agrupamos rutas bajo /prediction

# Endpoint ra√≠z

@router.get("/", summary="Estado del API", response_description="Mensaje de bienvenida")
def root():
    """
    Endpoint ra√≠z de la API de predicciones.
    
    Retorna un mensaje indicando que el servicio est√° activo.
    √ötil para verificar que el servidor corre correctamente.
    """
    return {"message": "Prediction API lista üöÄ"}

# Regresi√≥n Lineal

@router.get(
    "/linear/train",
    summary="Entrenar modelo lineal",
    response_description="M√©tricas del entrenamiento (MSE, p√©rdida)"
)
def train_linear():
    """
    Entrena un modelo de **regresi√≥n lineal**.
    
    - **Objetivo**: Predecir el **peso de un gato (kg)** a partir de su tama√±o.
    - **Datos simulados**: tama√±os de gatos entre 20‚Äì60 cm.
    - **Salida**: m√©tricas del entrenamiento, como error cuadr√°tico medio (MSE) y p√©rdida final.
    """
    return train_linear_model(save_plot=True)


@router.get(
    "/linear/predict",
    summary="Predecir peso con modelo lineal",
    response_description="Peso estimado (kg) del gato"
)
def predict_linear_endpoint(
    x: float = Query(..., description="Tama√±o del gato en cm (15‚Äì125)", example=42.0)
):
    """
    Usa el modelo entrenado de regresi√≥n lineal para predecir el **peso de un gato**.

    - **Par√°metro de entrada**:
        - `x`: tama√±o del gato en cm (valores entre 15 y 125).
    - **Salida**:
        - JSON con m√©tricas y el peso estimado en kg.
    """
    try:
        return predict_linear(x)
    except FileNotFoundError:
        # Si no existe un modelo entrenado previamente, retorna error 404
        raise HTTPException(status_code=404, detail="Modelo no entrenado")
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

# Regresi√≥n Log√≠stica

@router.get(
    "/logistic/train",
    summary="Entrenar modelo log√≠stico",
    response_description="M√©tricas del entrenamiento (accuracy, F1, etc.)"
)
def train_logistic():
    """
    Entrena un modelo de **regresi√≥n log√≠stica**.
    
    - **Objetivo**: Predecir si un gato atrapa un rat√≥n.
    - **Caracter√≠sticas usadas (features)**:
        - velocidad del gato (0‚Äì20 m/s)
        - nivel de energ√≠a (0‚Äì1)
    - **Salida**: m√©tricas del modelo como accuracy, precision, recall y F1-score.
    """
    return train_logistic_model(save_plot=True)

@router.get(
    "/logistic/predict",
    summary="Predecir captura de rat√≥n",
    response_description="Probabilidad y clase de predicci√≥n"
)
def predict_logistic_endpoint(
    x1: float = Query(..., description="Velocidad del gato en m/s (0‚Äì20)", example=12.5),
    x2: float = Query(..., description="Nivel de energ√≠a del gato (0‚Äì1)", example=0.7)
):
    """
    Usa el modelo entrenado de regresi√≥n log√≠stica para predecir si un gato atrapar√° un rat√≥n.

    - **Par√°metros de entrada**:
        - `x1`: velocidad en m/s (0‚Äì20).
        - `x2`: nivel de energ√≠a (0‚Äì1).
    - **Salida**:
        - `probabilidad`: valor entre [0,1] indicando la confianza del modelo.
        - `clase`: 
            - 0 = no atrapa al rat√≥n
            - 1 = atrapa al rat√≥n
    """
    try:
        return predict_logistic(x1, x2)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Modelo no entrenado")
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
